// Code generated by MockGen. DO NOT EDIT.
// Source: service_grpc.pb.go

// Package proto is a generated GoMock package.
package proto

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPersonClient is a mock of PersonClient interface.
type MockPersonClient struct {
	ctrl     *gomock.Controller
	recorder *MockPersonClientMockRecorder
}

// MockPersonClientMockRecorder is the mock recorder for MockPersonClient.
type MockPersonClientMockRecorder struct {
	mock *MockPersonClient
}

// NewMockPersonClient creates a new mock instance.
func NewMockPersonClient(ctrl *gomock.Controller) *MockPersonClient {
	mock := &MockPersonClient{ctrl: ctrl}
	mock.recorder = &MockPersonClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonClient) EXPECT() *MockPersonClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPersonClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPersonClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPersonClient)(nil).Get), varargs...)
}

// MockPersonServer is a mock of PersonServer interface.
type MockPersonServer struct {
	ctrl     *gomock.Controller
	recorder *MockPersonServerMockRecorder
}

// MockPersonServerMockRecorder is the mock recorder for MockPersonServer.
type MockPersonServerMockRecorder struct {
	mock *MockPersonServer
}

// NewMockPersonServer creates a new mock instance.
func NewMockPersonServer(ctrl *gomock.Controller) *MockPersonServer {
	mock := &MockPersonServer{ctrl: ctrl}
	mock.recorder = &MockPersonServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonServer) EXPECT() *MockPersonServerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPersonServer) Get(arg0 context.Context, arg1 *GetRequest) (*GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPersonServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPersonServer)(nil).Get), arg0, arg1)
}

// mustEmbedUnimplementedPersonServer mocks base method.
func (m *MockPersonServer) mustEmbedUnimplementedPersonServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPersonServer")
}

// mustEmbedUnimplementedPersonServer indicates an expected call of mustEmbedUnimplementedPersonServer.
func (mr *MockPersonServerMockRecorder) mustEmbedUnimplementedPersonServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPersonServer", reflect.TypeOf((*MockPersonServer)(nil).mustEmbedUnimplementedPersonServer))
}

// MockUnsafePersonServer is a mock of UnsafePersonServer interface.
type MockUnsafePersonServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePersonServerMockRecorder
}

// MockUnsafePersonServerMockRecorder is the mock recorder for MockUnsafePersonServer.
type MockUnsafePersonServerMockRecorder struct {
	mock *MockUnsafePersonServer
}

// NewMockUnsafePersonServer creates a new mock instance.
func NewMockUnsafePersonServer(ctrl *gomock.Controller) *MockUnsafePersonServer {
	mock := &MockUnsafePersonServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePersonServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePersonServer) EXPECT() *MockUnsafePersonServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPersonServer mocks base method.
func (m *MockUnsafePersonServer) mustEmbedUnimplementedPersonServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPersonServer")
}

// mustEmbedUnimplementedPersonServer indicates an expected call of mustEmbedUnimplementedPersonServer.
func (mr *MockUnsafePersonServerMockRecorder) mustEmbedUnimplementedPersonServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPersonServer", reflect.TypeOf((*MockUnsafePersonServer)(nil).mustEmbedUnimplementedPersonServer))
}
